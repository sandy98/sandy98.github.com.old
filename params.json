{"name":"Node-simple-router","body":"# Node.js Simple Router - Yet another minimalistic router for node.js\r\n\r\n## Install\r\n\r\nFrom Node Package Manager:\r\n\r\n<pre>\r\n  npm install node-simple-router\r\n</pre>\r\n\r\nor from source:\r\n\r\n<pre>\r\n  git clone git://github.com/sandy98/node-simple-router.git\r\n</pre>\r\n\r\n## Purpose\r\nDesigned to provide routes to barebones node http server, Sinatra style (or Express.js router, for that matter) staying out\r\nof your way for the rest.\r\n\r\nMain target: restful APIs for single page applications.\r\n\r\nSource main file - router.coffee - and testing utility - test_router.coffee - are coffeescript source files. Should you prefer to\r\nwork with javascript, just simply compile them (i.e. coffee -c router.coffee) provided you have installed coffee-script, which is as\r\nsimple as <pre>sudo npm install coffee-script -g</pre>\r\n\r\n## Basic Usage\r\n```coffeescript\r\n# Assumes router.coffee is located at the current working directory.\r\nRouter = require './router'\r\nhttp   = require 'http'\r\n\r\nrouter = Router()\r\n\r\nrouter.get '/', (request, response) ->\r\n  response.end 'Home page'\r\n\r\nrouter.get '/hello/:who', (request, response) ->\r\n  response.end \"Hello, #{params.who}\"\r\n\r\nserver = http.createServer router\r\n\r\nserver.listen 3000\r\n\r\n#Off you go!\r\n```\r\nor, for the unlikely case you didn't yet discover/fall in love with coffeescript, the javascript version:\r\n\r\n```javascript\r\n// Assumes router.coffee is located at the current working directory.\r\nvar Router = require('./router')\r\nvar http   = require('http')\r\n\r\nvar router = Router();\r\n\r\nrouter.get('/', function (request, response) {\r\n  response.end('Home page');})\r\n\r\nrouter.get('/hello/:who', function(request, response) {\r\n  response.end(\"Hello, \" + params.who);})\r\n\r\nserver = http.createServer(router)\r\n\r\nserver.listen(3000)\r\n\r\n//Off you go!\r\n```\r\n\r\n## Complementary topics\r\n###I) Default options\r\n\r\n-    **logging**: *true*\r\n\r\n     Turns off logging if defined false\r\n\r\n-    **log**: *console.log*\r\n\r\n     Defines console.log as default logging output.\r\n\r\n-    **serve_static**: *true*\r\n\r\n     Allows serving static content.\r\n\r\n-    **static_route**: *\"#{__dirname}/public\"*\r\n\r\n     Defines root directory for static contents\r\n\r\n-    **list_dir**: *true*\r\n\r\n     Allows/disallows directory listings\r\n\r\nExample:\r\n```javascript\r\n//Disallows logging and directory listing, uses '/static' for static contents,\r\n//defaults remaining options\r\nvar router = Router({logging: false; list_dir: false; static_route: __dirname + '/static'})\r\n```\r\n###II) Retrieving get/post data\r\n\r\nRequest get data may be retrieved from *request.get*, an object in JSON format\r\n\r\nRequest post data is included, also in JSON format, in *request.post*, although in this case, if data came in an\r\nunrecognized format, it will be retrieved as raw data, without any conversion.\r\n\r\nFinally, *request.get* and *request.post* are joined in *request.body*, so if you don't care how the data got to the\r\nserver, you can use that.\r\n\r\n###III) Todo list\r\n-    Making directory listing actually work\r\n-    Preparing a nice template for directory listing.\r\n-    Managing file uploads.\r\n\r\n\r\n## Final note\r\nWas this necessary?\r\n\r\nProbably not.\r\n\r\nBut then again, there are a couple of reasons that I think make it worth, and perhaps, useful to someone who shares these.\r\n\r\nFor one thing, *reinventing the wheel is not only fun, it's frequently highly educative*.\r\n\r\nSecond, there are quite a bunch of routing solutions for node.js, but I found the ones that come bundled with node frameworks,\r\nalthough in most cases high quality and performant, also in many cases just a bit too much stuffed with features that either I didn't\r\nneed or was unable to manage/tweak to my projects needs, hence the decision to roll my own, mainly aimed to serve as a lightweight\r\ncomponent for a *restful API*.\r\n\r\nLast but not least, I wanted to *share the fun*.\r\n\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012 Ernesto Savoretti <esavoretti@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","tagline":"Yet another minimalistic router for node.js","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}